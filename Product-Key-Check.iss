; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Test Application"
#define MyAppVersion "0.1"
#define MyAppPublisher "Htet Aung Hlaing"
#define MyAppURL "http://htetaung.com"
#define MyAppExeName "MyProg.exe"
#define MyAppAssocName MyAppName + " File"
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{2D849269-CA71-49FC-906E-1A8C5A97FC29}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
ChangesAssociations=yes
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputDir=".\bin"
OutputBaseFilename=mysetup
SetupIconFile= ".\assets\InstallerIcon.ico"
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Program Files (x86)\Inno Setup 6\Examples\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent;

[Code]

var
  ProductKeyInputPage: TInputQueryWizardPage;

//A http request
function HttpRequest(url : string): string;
var
  WinHttpReq: Variant;
begin
  WinHttpReq := CreateOleObject('WinHttp.WinHttpRequest.5.1');
  WinHttpReq.Open('GET', url, False);
  WinHttpReq.Send('');
  if WinHttpReq.Status <> 200 then
  begin
    Result := 'HTTP Error: ' + IntToStr(WinHttpReq.Status) + ' ' + WinHttpReq.StatusText;
  end
    else
  begin
    Result := WinHttpReq.ResponseText;
  end;
end;

//After Next Button on Product Key Page is clicked
function ProductKeyPageNextButtonClicked(Sender: TWizardPage): Boolean;
var
  url : string;
  ProductKeyCheckResult : string;
begin
  url := 'YourLink'+ProductKeyInputPage.Values[0];
  Result := True;
  ProductKeyCheckResult := HttpRequest(url);
  if (ProductKeyCheckResult = '1') then
  begin
    //Product Key exists on the server! Installing the application...
    Result := True;
    MsgBox('You have used up the product key: "' + ProductKeyInputPage.Values[0] + '", Please ensure that you finish the installation process so that the product key does not go to waste!' , mbInformation, MB_OK);
  end
  else
  begin
    if (ProductKeyCheckResult = '0') then
      begin
        //Product Key does not exist on the server! Restart the procedure
        Result := False;
        MsgBox('Your product key: "' + ProductKeyInputPage.Values[0] + '" is not valid!' , mbError, MB_OK);
      end
    else
      begin
        //Some kind of Http Error has occured
        Result := False;
        MsgBox('A proper internet connection is required to check if the product key is valid or not. Please check your connection and try again!' , mbError, MB_OK);
      end;  
  end;
end;

//Checking the validity of the product key
procedure CheckProductKeyValidity(Sender : TObject);
begin
  if (length(ProductKeyInputPage.Values[0]) <> 20) then
  begin
    
  end
  else
  begin
    
  end;
end;

//Display the page with the inputfield
procedure DisplayProductKeyPage();
begin
  ProductKeyInputPage := CreateInputQueryPage(wpWelcome, 'Product Key', 'Please input product key to proceed (Make sure you are connected to the internet)','');

  ProductKeyInputPage.Add('Product Key: ', False);

  ProductKeyInputPage.Edits[0].onChange := @CheckProductKeyValidity;
  ProductKeyInputPage.OnNextButtonClick := @ProductKeyPageNextButtonClicked;  
end;

//Initialize the wizard
procedure InitializeWizard;
begin
  DisplayProductKeyPage();
end;
